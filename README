===== Summary

Rack convenience middleware that allows triggering different actions based on
requested mime type. Standalone version of the equivalent Rails functionality.

===== Installation

  sudo gem install mynyml-rack-respond_to --source=http://gems.github.com/

===== Example

  require 'rubygems'
  require 'rack'
  require 'rack/respond_to'

  class App
    include Rack::RespondTo

    def call(env)
      # Pass in the env, and RespondTo will retrieve the requested mime type
      # from the HTTP_ACCEPT header
      Rack::RespondTo.env = env

      # Alternatively, to use standalone you can also assign the mime type
      # directly (this will take precedence over the env)
      #Rack::RespondTo.mime_type = 'text/html'

      body = respond_to do |format|
        format.html { '<em>html</em>' }
        format.xml  { '<body>xml</body>' }
      end

      [200, {'Content-Type' => Rack::RespondTo.mime_type}, [body]]
    end
  end

  run App.new

===== Tips

Use together with Rack::AbstractFormat to respond to routes based on url
extensions. For example, if you want <tt>example.com/foo.xml</tt> to trigger
the <tt>format.xml</tt> block (Rack::AbstractFormat moves the extension into
HTTP_ACCEPT).

  sudo gem install mynyml-rack-abstract-format --source=http://gems.github.com/

See examples/recommended_use.ru for a complete example.

===== Links

source:: http://github.com/mynyml/rack-respond_to
rdocs::  http://docs.github.com/mynyml/rack-respond_to
